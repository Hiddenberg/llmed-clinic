
## LLMed Clinic — UI Style Guide

### Brand principles
- **Clarity first**: clinical, calm, minimal, with generous white space.
- **Trust and care**: whites and medical blues as the primary palette; sparing accents.
- **Modern medical**: clean glass morphism effects and subtle gradients for contemporary feel.
- **Consistency**: shared tokens and components across Admin, Doctor, and Patient spaces.
- **Accessibility**: minimum 4.5:1 body text contrast, visible focus

### Design philosophy
- **Glass morphism**: Use subtle transparency (`bg-white/90`, `bg-white/95`) with soft borders
- **Gradient accents**: Apply sparingly to icons, headers, and key interactive elements
- **Layered depth**: Create visual hierarchy through subtle shadows and overlays
- **Smooth interactions**: Gentle hover effects with scaling and color transitions
- **Breathing space**: Generous padding and margins for medical calm

### Design tokens
Use Tailwind v4 `@theme` tokens as the single source of truth. Reference tokens via utilities like `bg-bg`, `text-brand-600`, `border-border`, and `shadow-elevation-1`. 

```css
/* Added to application/src/app/globals.css */
@import "tailwindcss";

@theme {
   /* Brand */
   --color-brand-50:   #f0f6ff;
   --color-brand-100:  #e0efff;
   --color-brand-200:  #c7e0ff;
   --color-brand-300:  #9fc8ff;
   --color-brand-400:  #6ea9ff;
   --color-brand-500:  #3a86ff; /* primary */
   --color-brand-600:  #2562cc;
   --color-brand-700:  #1c4aa0;
   --color-brand-800:  #163b7e;
   --color-brand-900:  #122f63;

   /* Neutrals */
   --color-gray-50:    #f8fafc;
   --color-gray-100:   #f1f5f9;
   --color-gray-200:   #e2e8f0;
   --color-gray-300:   #cbd5e1;
   --color-gray-400:   #94a3b8;
   --color-gray-500:   #64748b;
   --color-gray-600:   #475569;
   --color-gray-700:   #334155;
   --color-gray-800:   #1f2937;
   --color-gray-900:   #0f172a;

   /* Feedback */
   --color-success-500: #22c55e;
   --color-warning-500: #f59e0b;
   --color-danger-500:  #ef4444;
   --color-info-500:    #3b82f6;

   /* Semantic surfaces */
   --color-bg:        #ffffff;
   --color-surface:   #ffffff;
   --color-muted:     var(--color-gray-50);
   --color-overlay:   rgba(15, 23, 42, 0.6);

   /* Text */
   --color-text:         #0f172a; /* default */
   --color-text-muted:   #475569;
   --color-text-inverse: #ffffff;

   /* Borders & radii */
   --color-border:    var(--color-gray-200);
   --radius-sm: 6px;
   --radius-md: 10px;
   --radius-lg: 14px;

   /* Shadows */
   --shadow-elevation-1: 0 1px 2px rgba(2, 6, 23, 0.06);
   --shadow-elevation-2: 0 2px 6px rgba(2, 6, 23, 0.08);
   --shadow-elevation-3: 0 8px 24px rgba(2, 6, 23, 0.10);

   /* Motion */
   --ease-out: cubic-bezier(0.16, 1, 0.3, 1);
   --ease-in:  cubic-bezier(0.32, 0, 0.67, 0);
   --dur-1:    120ms;
   --dur-2:    180ms;
   --dur-3:    260ms;

   /* Modern glass & gradient effects */
   --gradient-brand: linear-gradient(135deg, var(--color-brand-500) 0%, var(--color-brand-400) 100%);
   --shadow-glow-brand: 0 0 0 3px oklch(70% 0.10 250 / 0.22), 0 0 24px oklch(65% 0.12 250 / 0.30);
   --color-surface-veil: oklch(98% 0 250 / 0.82);
}

/* Modern animations */
@keyframes fade-in-up {
   0% {
      opacity: 0;
      transform: translateY(12px);
   }
   100% {
      opacity: 1;
      transform: translateY(0);
   }
}

.animate-fade-in-up {
   animation: fade-in-up 0.8s ease-out forwards;
   opacity: 0;
}
```

- **Usage examples**
  - Glass card: `class="bg-white/90 border border-gray-200/50 rounded-xl shadow-lg"`
  - Gradient icon: `class="bg-gradient-to-r from-brand-500 to-blue-500"`
  - Brand text: `class="bg-gradient-to-r from-gray-800 to-gray-600 bg-clip-text text-transparent"`

### Color system
- **Primary**: `brand-500` for CTAs, `brand-600` for hover, `brand-700` for active.
- **Neutrals**: glass backgrounds (`white/90`, `white/95`) and subtle borders (`gray-200/50`).
- **Gradients**: Multi-stop gradients for icons and accent elements (`from-brand-500 via-brand-400 to-blue-500`).
- **Feedback**: `success`, `warning`, `danger`, `info` reserved for status and alerts only.
- **Role accents** (subtle, never dominant):
  - Admin: `brand-700` accents
  - Doctor: `brand-600` accents
  - Patient: `brand-500` accents

Ensure button text on brand backgrounds uses `text-inverse` and meets WCAG AA.

### Typography
- **Font**: Inter or system fallback for clean medical UI.
- **Gradient headers**: Use `bg-gradient-to-r from-gray-800 to-gray-600 bg-clip-text text-transparent` for main headings
- **Scale** (unitless Tailwind classes in parentheses):
  - Display: 30px/36px (`text-3xl md:text-4xl`) 700
  - H1: 24px/32px (`text-2xl md:text-3xl`) 700 - Apply gradient effect
  - H2: 20px/28px (`text-xl md:text-2xl`) 600 - Apply gradient effect
  - H3: 18px/26px (`text-lg`) 600
  - Body: 16px/24px (`text-base`) 400/500
  - Small: 14px/20px (`text-sm`) 400/500
  - Caption: 12px/16px (`text-xs`) 400

Apply `tracking-tight` for headings, normal tracking for body text.

### Modern glass morphism system
- **Primary surfaces**: `bg-white/95` with `border-gray-200/50` for main containers
- **Secondary surfaces**: `bg-white/90` with `border-gray-200/50` for cards and content areas
- **Hover states**: Transition to `bg-white` for enhanced readability
- **Shadows**: Use `shadow-lg` for primary containers, `shadow-md` for hover states
- **Avoid**: Heavy `backdrop-blur` effects that interfere with readability

### Gradient system
- **Icons**: `bg-gradient-to-r from-brand-500 to-blue-500` for primary icons
- **Buttons**: Reserve gradients for hero CTAs: `bg-gradient-to-r from-brand-500 to-brand-600`
- **Backgrounds**: Subtle overlays: `bg-gradient-to-br from-brand-500/4 to-blue-500/6`
- **Text**: Headers use `bg-gradient-to-r from-gray-800 to-gray-600 bg-clip-text text-transparent`
- **Accent lines**: `bg-gradient-to-r from-brand-500 to-blue-500` for progress indicators

### Spacing and layout
- **Spacing scale**: 4-based steps. Use Tailwind spacing `1, 1.5, 2, 3, 4, 6, 8, 10, 12` (4px, 6px, 8px, 12px, 16px, 24px, 32px, 40px, 48px).
- **Card padding**: Use `p-6` for main containers, `p-4` for content cards
- **Radii**: `rounded-xl` (12px) for cards, `rounded-2xl` (16px) for main containers, `rounded-lg` for buttons
- **Containers**: max-width `7xl` for data screens; `prose` widths for content.
- **Grid**: favor 12-column at `lg+`, 2–4 columns for cards; single column on mobile.

### Modern interaction patterns
- **Hover scaling**: Use `hover:scale-[1.02]` for cards, `hover:scale-105` for buttons
- **Color transitions**: `transition-all duration-300` for smooth interactions  
- **Staggered animations**: Use animation delays (`style={{ animationDelay: \`\${index * 100}ms\` }}`)
- **Priority indicators**: Color-coded dots with variable pulse speeds based on urgency

### Components

- **Modern Button**
```tsx
interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
   variant?: "primary" | "gradient" | "secondary" | "ghost" | "danger";
   size?: "sm" | "md" | "lg";
}

export function Button ({
   variant = "primary",
   size = "md",
   className,
   ...props
}: ButtonProps) {
   const base = "inline-flex items-center justify-center font-medium transition-all duration-300 rounded-xl focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-500 disabled:opacity-60 disabled:cursor-not-allowed hover:scale-105";
   const sizes = {
      sm: "h-8 px-3 text-sm gap-1.5",
      md: "h-10 px-4 text-sm gap-2",
      lg: "h-12 px-6 text-base gap-2.5",
   } as const;
   const variants = {
      primary:    "bg-brand-500 hover:bg-brand-600 active:bg-brand-700 text-text-inverse shadow-lg",
      gradient:   "bg-gradient-to-r from-brand-500 to-blue-500 hover:from-brand-600 hover:to-blue-600 text-text-inverse shadow-lg",
      secondary:  "bg-white/90 text-text border border-gray-200/50 hover:bg-white hover:shadow-md",
      ghost:      "bg-transparent text-text hover:bg-gray-50",
      danger:     "bg-danger-500 text-text-inverse hover:bg-red-600 shadow-lg",
   } as const;
   return (
      <button className={[base, sizes[size], variants[variant], className].filter(Boolean).join(" ")} {...props} />
   );
}
```

- **Glass Card**
```tsx
export function GlassCard ({ children, className = "", ...props }: { children: React.ReactNode; className?: string; [key: string]: any }) {
   return (
      <section 
         className={`bg-white/90 border border-gray-200/50 rounded-xl shadow-lg transition-all duration-300 hover:bg-white hover:shadow-xl ${className}`} 
         {...props}
      >
         {children}
      </section>
   );
}

export function GlassCardHeader ({ title, subtitle, actions, icon }: { 
   title: string; 
   subtitle?: string; 
   actions?: React.ReactNode;
   icon?: React.ReactNode;
}) {
   return (
      <header className="p-6 border-b border-gray-200/50">
         <div className="flex items-center justify-between">
            <div className="space-y-2">
               <div className="flex items-center gap-3">
                  {icon && (
                     <div className="p-2 bg-gradient-to-r from-brand-500 to-blue-500 rounded-lg shadow-lg">
                        <div className="text-white drop-shadow-sm">
                           {icon}
                        </div>
                     </div>
                  )}
                  <h2 className="text-2xl font-bold bg-gradient-to-r from-gray-800 to-gray-600 bg-clip-text text-transparent">
                     {title}
                  </h2>
               </div>
               {subtitle && <p className="text-gray-600 text-sm ml-11">{subtitle}</p>}
            </div>
            {actions}
         </div>
      </header>
   );
}

export function GlassCardBody ({ children }: { children: React.ReactNode }) {
   return <div className="p-6">{children}</div>;
}
```

- **Stat Card**
```tsx
export function StatCard ({ 
   icon, 
   label, 
   value, 
   description, 
   color = 'brand',
   index = 0 
}: { 
   icon: React.ReactNode; 
   label: string; 
   value: number | string; 
   description: string;
   color?: 'brand' | 'success' | 'warning' | 'danger' | 'info';
   index?: number;
}) {
   const colorClasses = {
      brand: { bg: 'from-brand-500/8 to-blue-500/6', icon: 'from-brand-500 to-blue-500', text: 'text-brand-700' },
      success: { bg: 'from-green-500/8 to-emerald-500/6', icon: 'from-green-500 to-emerald-500', text: 'text-green-700' },
      warning: { bg: 'from-orange-500/8 to-yellow-500/6', icon: 'from-orange-500 to-amber-500', text: 'text-orange-700' },
      danger: { bg: 'from-red-500/8 to-pink-500/6', icon: 'from-red-500 to-rose-500', text: 'text-red-700' },
      info: { bg: 'from-blue-500/8 to-cyan-500/6', icon: 'from-blue-500 to-sky-500', text: 'text-blue-700' }
   };
   const colors = colorClasses[color];

   return (
      <div 
         className="group bg-white/90 border border-gray-200/50 rounded-xl p-6 transition-all duration-300 hover:scale-[1.02] hover:shadow-lg animate-fade-in-up cursor-pointer"
         style={{ animationDelay: `${index * 100}ms` }}
      >
         <div className={`absolute inset-0 bg-gradient-to-br ${colors.bg} rounded-xl opacity-40 group-hover:opacity-60 transition-opacity duration-300`} />
         
         <div className="relative z-10">
            <div className="flex justify-between items-start mb-4">
               <div className={`p-3 bg-gradient-to-r ${colors.icon} rounded-xl shadow-lg group-hover:scale-105 transition-transform duration-300`}>
                  <div className="text-white drop-shadow-sm">{icon}</div>
               </div>
            </div>
            
            <div className="space-y-2">
               <p className="font-medium text-gray-600 text-sm tracking-wide">{label}</p>
               <div className="flex items-baseline gap-2">
                  <p className={`text-3xl font-bold ${colors.text} group-hover:scale-105 transition-transform duration-300`}>{value}</p>
                  <div className={`w-2 h-2 ${colors.text.replace('text-', 'bg-')} rounded-full animate-pulse`} />
               </div>
               <p className="text-gray-500 text-xs leading-relaxed">{description}</p>
            </div>
         </div>
      </div>
   );
}
```

- **Activity Item**
```tsx
export function ActivityItem ({ 
   icon, 
   title, 
   description, 
   timestamp, 
   priority = 'low',
   relatedPerson,
   type = 'system',
   index = 0 
}: {
   icon: React.ReactNode;
   title: string;
   description: string;
   timestamp: string;
   priority?: 'low' | 'medium' | 'high';
   relatedPerson?: string;
   type?: 'patient' | 'doctor' | 'system' | 'appointment';
   index?: number;
}) {
   const typeColors = {
      patient: { bg: 'from-brand-500/6 to-blue-500/4', icon: 'from-brand-500 to-blue-500' },
      doctor: { bg: 'from-green-500/6 to-emerald-500/4', icon: 'from-green-500 to-emerald-500' },
      system: { bg: 'from-gray-500/6 to-slate-500/4', icon: 'from-gray-500 to-slate-500' },
      appointment: { bg: 'from-blue-500/6 to-cyan-500/4', icon: 'from-blue-500 to-cyan-500' }
   };

   const priorityIndicators = {
      low: <div className="bg-green-400 rounded-full w-2 h-2 animate-pulse" style={{ animationDuration: '3s' }} />,
      medium: <div className="bg-orange-400 rounded-full w-2 h-2 animate-pulse" style={{ animationDuration: '2s' }} />,
      high: <div className="bg-red-400 rounded-full w-2 h-2 animate-pulse shadow-red-400/50 shadow-sm" style={{ animationDuration: '1s' }} />
   };

   const colors = typeColors[type];

   return (
      <div 
         className="group bg-white/90 hover:bg-white border border-gray-200/50 rounded-xl p-4 transition-all duration-300 hover:scale-[1.01] hover:shadow-md animate-fade-in-up overflow-hidden"
         style={{ animationDelay: `${index * 100}ms` }}
      >
         <div className={`absolute inset-0 bg-gradient-to-br ${colors.bg} rounded-xl opacity-40 group-hover:opacity-60 transition-opacity duration-300`} />
         
         <div className="relative z-10 flex items-start gap-4">
            <div className={`flex items-center justify-center w-10 h-10 bg-gradient-to-r ${colors.icon} rounded-lg shadow-lg group-hover:scale-105 transition-transform duration-300`}>
               <div className="text-white drop-shadow-sm">{icon}</div>
            </div>
            
            <div className="flex-1 min-w-0">
               <div className="flex justify-between items-start gap-2 mb-2">
                  <h4 className="font-semibold text-gray-800 text-sm group-hover:text-gray-900 transition-colors duration-300">{title}</h4>
                  <div className="flex items-center gap-2 flex-shrink-0">
                     {priorityIndicators[priority]}
                     <span className="bg-gray-100/80 px-2 py-1 rounded-full font-medium text-gray-500 text-xs">{timestamp}</span>
                  </div>
               </div>
               
               <p className="text-gray-600 text-sm leading-relaxed group-hover:text-gray-700 transition-colors duration-300">{description}</p>
               
               {relatedPerson && (
                  <div className="flex items-center gap-2 mt-3">
                     <div className="bg-gradient-to-b from-gray-300 to-gray-400 rounded-full w-1 h-4" />
                     <p className="font-medium text-gray-600 text-xs">
                        Relacionado: <span className="text-gray-800">{relatedPerson}</span>
                     </p>
                  </div>
               )}
            </div>
         </div>
         
         <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-gray-200 rounded-full overflow-hidden">
            <div className={`h-full bg-gradient-to-r ${colors.icon} rounded-full transform -translate-x-full group-hover:translate-x-0 transition-transform duration-500`} />
         </div>
      </div>
   );
}
```

### Page layout patterns
- **Page wrapper**: `bg-gradient-to-br from-gray-50 via-white to-brand-50/30 min-h-screen`
- **Container**: `max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8`
- **Grid layouts**: `grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6`

### Animation system
- **Staggered entrance**: Use animation delays (`animationDelay: \`\${index * 100}ms\``)
- **Hover interactions**: Combine `hover:scale-[1.02]` with `hover:shadow-lg`
- **Loading states**: Use `animate-fade-in-up` with opacity transitions
- **Priority indicators**: Variable pulse speeds for urgency communication

### Background decorative elements
```tsx
export function FloatingGeometry () {
   return (
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
         <div className="absolute -top-24 -right-24 bg-gradient-to-br from-brand-500/10 to-blue-500/5 rounded-full w-96 h-96 animate-pulse" style={{ animationDuration: '4s' }} />
         <div className="absolute top-1/2 -left-32 bg-gradient-to-br from-blue-400/8 to-brand-400/5 rounded-full w-64 h-64 animate-float" style={{ animationDuration: '8s' }} />
         <div className="absolute top-20 left-1/4 bg-gradient-to-b from-brand-300/30 to-transparent w-px h-32" />
         <div className="absolute top-32 right-1/3 bg-gradient-to-r from-blue-300/30 to-transparent w-24 h-px" />
      </div>
   );
}
```

### Iconography
- **Library**: lucide-react only.
- **Size**: 16px in dense UI, 20px default, 24px for page headers.
- **Stroke**: 1.75 by default. Color inherits currentColor.
- **Gradient containers**: Wrap icons in gradient backgrounds for primary actions

```tsx
import { Calendar, Stethoscope } from "lucide-react";

export function GradientIcon ({ icon: Icon, className = "" }: { icon: any; className?: string }) {
   return (
      <div className={`p-2 bg-gradient-to-r from-brand-500 to-blue-500 rounded-lg shadow-lg ${className}`}>
         <Icon size={20} strokeWidth={1.75} className="text-white drop-shadow-sm" />
      </div>
   );
}
```

### Modern glass system guidelines
- **DO**: Use `bg-white/90` or `bg-white/95` for clean transparency
- **DO**: Combine with `border-gray-200/50` for subtle definition
- **DO**: Apply `shadow-lg` for primary containers, `shadow-md` for cards
- **DO**: Use gradient overlays (`bg-gradient-to-br from-brand-500/6 to-blue-500/4`) for subtle color coding
- **DON'T**: Use heavy `backdrop-blur` effects that reduce readability
- **DON'T**: Overuse sparkle icons or excessive decorative elements
- **DON'T**: Apply blur effects to text containers

### Accessibility
- Color contrast AA minimum for body and icons; AAA for small text when feasible.
- Always provide focus-visible outlines (`focus-visible:outline-brand-500`).
- All interactive elements must be reachable by keyboard and have discernible names.
- Announce async updates via ARIA live regions in toasts and inline messages.
- Ensure gradient text maintains proper contrast ratios

### Content style
- Tone: calm, direct, supportive. Avoid jargon; prefer patient-friendly language.
- Sentence case for labels and buttons; Title Case for page titles only.
- Use gradient text effects for main headings to create visual hierarchy

### Do & Don't
- **Do**: Use subtle glass effects with proper opacity levels
- **Do**: Apply gradients sparingly to create focal points
- **Do**: Maintain generous whitespace and clean typography
- **Do**: Use staggered animations for smooth page loading
- **Don't**: Overuse blur effects that interfere with readability
- **Don't**: Add excessive decorative elements like sparkles
- **Don't**: Use heavy shadows or overwhelming visual effects

### Quick checklist
- Glass cards use `bg-white/90` with `border-gray-200/50`
- Headers use gradient text effects for visual hierarchy
- Icons are wrapped in gradient containers for primary actions
- Hover effects include gentle scaling and shadow enhancement
- Animation delays create smooth staggered entrances
- Priority is given to readability and medical professionalism

This guide ensures a cohesive, modern, and accessible clinical experience that balances contemporary design with medical trust and clarity across Admin, Doctor, and Patient areas.
- Forms single column on mobile, readable labels
- Icons from lucide-react only
- Skeletons for loading, clear empty states

This guide ensures a cohesive, accessible, and calm clinical experience across Admin, Doctor, and Patient areas while remaining easy to extend with Tailwind v4 and React 19 in Next.js 15.